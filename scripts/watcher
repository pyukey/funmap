#!/bin/bash
start()
{
  path="$(pwd)"
  echo "$path"
  files=($path/*)
  cd "../funmap"
  while true; do
    watcher
    sleep 5
  done
}
findFamily() {
  case "$1" in
    Debian) echo "Linux";;
    Ubuntu) echo "Linux";;
    Kali) echo "Linux";;
    RHEL) echo "Linux";;
    CentOS) echo "Linux";;
    Fedora) echo "Linux";;
    Rocky) echo "Linux";;
    Alma) echo "Linux";;
    Arch) echo "Linux";;
    Manjaro) echo "Linux";;
    Endeavour) echo "Linux";;
    Alpine) echo "Linux";;
    NixOS) echo "Linux";;
    FreeBSD) echo "BSD";;
    OpenBSD) echo "BSD";;
    NetBSD) echo "BSD";;
    DragonFly) echo "BSD";;
    *) echo "Windows";;
  esac
}
makeJSON() {
  ip="$1"
  sub="$2"
  hostname="$3"
  distro="$4"
  printf "{\n  \"properties\": {\n    \"ip\": \"$ip\",\n    \"hostname\": \"$hostname\",\n    \"distro\": \"$distro\"\n  },\n  \"services\": [\n"
  grep open "fun/$sub/$ip/nmap.txt" | awk '{print "    {\n      \"name\": \""$3"\",\n      \"port\": \""$1"\",\n      \"version\": \""$4"\"\n    },"}' | sed '$ s/.$//'
  printf "  ],\n  \"defaultCreds\": {\n"
  if grep -q "$ip:" fun/$sub/crack.txt; then
    grep "$ip:" fun/$sub/crack.txt | awk -F: '{print "    \"user\": \""$2"\",\n    \"passwd\": \""$3"\""}'
  else
    printf "    \"user\": \"N/A\",\n    \"passwd\": \"N/A\"\n"
  fi
  printf "  },\n  \"passwords\": [\n"
  if [ -f fun/$sub/$ip/pass.txt ]; then
    cat fun/$sub/$ip/pass.txt | awk '{print "    {\n      \"user\": \""$1"\",\n      \"passwd\": \""$2"\"\n    }\n"}'
  fi
  printf "  ]\n}"
}
scan()
{
  ip="$1"
  sub="$2"
  distro="$3"
  hostname="$4"
  nmap -sS -sV "$ip" > "fun/$sub/$ip/nmap.txt" 2>/dev/null
  makeJSON $ip $sub "$hostname" $distro > fun/$sub/$ip/data.json
}
brute()
{
  ip="$1"
  sub="$2"
  user="$(grep $ip fun/$sub/crack.txt | awk -F: '{print $2}')"
  pass="$(grep $ip fun/$sub/crack.txt | awk -F: '{print $3}')"
  output="$(sshpass -p $pass ssh $user@$ip 'echo \"himom\"' 2>&1 | grep -v 'denied\|closed\|reset\|Connection\|SSHPASS')"
  if [[ -n "$output" ]]; then
    echo "yes" >> fun/$sub/$ip/brute.txt
    printf "\033[91m$ip\033[00m still has default creds!\n"
  else
    echo "no"  >> fun/$sub/$ip/brute.txt
  fi
}
send()
{
  ip="$2"
  sub="$3"
  user="$(tail -n 1 fun/$sub/$ip/pass.txt | awk '{print $1}')"
  pass="$(tail -n 1 fun/$sub/$ip/pass.txt | awk '{print $2}')"
  echo "Sent"
}
run()
{
  file="$1"
  ip="$2"
  sub="$3"
  user="$(tail -n 1 fun/$sub/$ip/pass.txt | awk '{print $1}')"
  pass="$(tail -n 1 fun/$sub/$ip/pass.txt | awk '{print $2}')"
  sshpass -p $pass scp $1 $user@$ip:
  sshpass -p $pass ssh -tt $user@$ip "echo '$pass' | sudo -S bash $4"
}
execute()
{
  case "$1" in
    *scan*) printf "\033[96mScanning\033[00m\n"
        while IFS=" " read -r ip sub distro hostname; do
          scan $ip $sub $distro "$hostname" &
        done < $1
        wait
        echo "Done scanning!";;
    *roll*) printf "\033[92mRolling passwords\033[00m\n"
        while IFS=" " read -r ip sub distro hostname; do
          family="$(findFamily $distro)"
          (send  "$path/../funmap/WORDLIST.TXT" $ip $sub && run "$path/../funmap/scripts/$family/rollPasswd.sh" $ip $sub "rollPasswd.sh") &
        done < $1;;
    *brute*) printf "\033[91mBrute forcing\033[00m\n"
        while IFS=" " read -r ip sub distro hostname; do
          brute $ip $sub &
        done < $1;;
    *plant*) printf "\033[91mPlanting vulnerabilities\033[00m\n"
        num=$(grep -n "xxxxxxxxx" "$1" | awk -F: '{print $1}')
        while IFS=" " read -r ip sub distro hostname; do
          family="$(findFamily $distro)"
          while IFS= read -r script; do
            echo "Running $script on $ip"
            run ./scripts/$family/plant/$script $ip $sub &
          done < <(tail -n "+$((num + 1))" "$1")
        done < <(head -n "$((num - 1))" "$1");;
    *patch*) printf "\033[92mPatching vulnerabilities\033[00m\n"
        num=$(grep -n "xxxxxxxxx" "$1" | awk -F: '{print $1}')
        while IFS=" " read -r ip sub distro hostname; do
          family="$(findFamily $distro)"
          while IFS= read -r script; do
            echo "Running $script on $ip"
            run ./scripts/$family/plant/$script $ip $sub &
          done < <(tail -n "+$((num + 1))" "$1")
        done < <(head -n "$((num - 1))" "$1");;
    *) printf "unknown command\n";;
  esac
}
watcher()
{
  for f in $path/*; do
    if [[ ! "${files[@]}" =~ "$f" ]]; then
      execute $f
    fi
  done
  files=($path/*)
}
 
start
